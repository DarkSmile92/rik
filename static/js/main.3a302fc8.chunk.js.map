{"version":3,"sources":["serviceWorker.js","AppBar.js","utils.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","ButtonAppBar","classes","react_default","a","createElement","className","AppBar","position","Toolbar","Typography","variant","str2Float","stringValue","parseFloat","replace","CssTextField","withStyles","& label.Mui-focused","color","& .MuiInput-underline:after","borderBottomColor","& .MuiOutlinedInput-root.Mui-disabled","& fieldset","borderColor","backgroundColor","TextField","createStyles","spacer","marginTop","marginBottom","container","display","flexWrap","textField","marginLeft","width","dense","menu","formControl","margin","returnNegative","fontWeight","returnPositive","button","leftIcon","injectIntl","props","INTL","intl","_useState","useState","_useState2","Object","slicedToArray","price","setPrice","_useState3","_useState4","provision","setProvision","_useState5","_useState6","buyingcosts","setBuyingcosts","_useState7","_useState8","interest","setInterest","_useState9","_useState10","repayment","setRepayment","_useState11","_useState12","condoFee","setCondoFee","_useState13","_useState14","rentIndex","setRentIndex","_useState15","_useState16","rent","setRent","_useState17","_useState18","livingSpace","setLivingSpace","_useState19","_useState20","totalAmount","setTotalAmount","_useState21","_useState22","pricePerSpace","setPricePerSpace","_useState23","_useState24","interestPerMonth","setInterestPerMonth","_useState25","_useState26","repaymentPerMonth","setRepaymentPerMonth","_useState27","_useState28","monthlyCosts","setMonthlyCosts","_useState29","_useState30","monthlyCostsNoBuyingCosts","setMonthlyCostsNoBuyingCosts","_useState31","_useState32","monthlyCostsInvest","setMonthlyCostsInvest","recalculate","_price","_provision","_buyingcosts","_livingSpace","_interest","_repayment","_condoFee","_rent","_rentIndex","isNaN","amt_provision","amt_total","amt_interest_yearly","amt_repayment_yearly","amt_costs_monthly","amt_costs_monthly_invest","toString","toFixed","numberFormat","theString","r","parseInt","toLocaleString","formatCurrency","value","formatNumber","style","currency","Fragment","src_AppBar","Container","maxWidth","noValidate","autoComplete","Grid","item","xs","rifm_esm","onChange","newVal","format","v","_ref","id","label","type","InputProps","endAdornment","InputAdornment","e","target","helperText","parsedPrice","getBuyingCostsFormatted","parsedInterest","_ref2","newRent","Math","round","_ref3","_ref4","disabled","Box","borderBottom","m","concat","Button","size","onClick","v_monthly","wantedRent","proposeRent","MonetizationOn_default","addLocaleData","toConsumableArray","de","createMuiTheme","palette","primary","main","ReactDOM","render","index_es","locale","ThemeProvider","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a302fc8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: \"center\"\r\n  }\r\n}));\r\n\r\nconst ButtonAppBar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {/*<IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"Menu\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>*/}\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            RIK - Robs Immo Kalkulation\r\n          </Typography>\r\n          {/*<Button color=\"inherit\">Login</Button>*/}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonAppBar;\r\n","/**\r\n * Number.prototype.format(n, x, s, c)\r\n *\r\n * @param integer n: length of decimal\r\n * @param integer x: length of whole part\r\n * @param mixed   s: sections delimiter\r\n * @param mixed   c: decimal delimiter\r\n */\r\nexport const formatMoney = (a, n, x, s, c) => {\r\n  var re = \"\\\\d(?=(\\\\d{\" + (x || 3) + \"})+\" + (n > 0 ? \"\\\\D\" : \"$\") + \")\",\r\n    num = a.toFixed(Math.max(0, ~~n));\r\n\r\n  return (c ? num.replace(\".\", c) : num).replace(\r\n    new RegExp(re, \"g\"),\r\n    \"$&\" + (s || \",\")\r\n  );\r\n};\r\n\r\nexport const str2Float = stringValue =>\r\n  parseFloat(stringValue.replace(/[^\\d]+/, \"\"));\r\n\r\nexport const formatNumber = n => {\r\n  // format number 1000000 to 1,234,567\r\n  return n.replace(/\\D/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n};\r\n","import \"./App.css\";\n\nimport React, { useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/styles\";\n\nimport AppBar from \"./AppBar\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\nimport { Rifm } from \"rifm\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { injectIntl } from \"react-intl\";\nimport { str2Float } from \"./utils\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst CssTextField = withStyles({\n  root: {\n    \"& label.Mui-focused\": {\n      color: \"green\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"green\"\n    },\n    /*\"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"red\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"yellow\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"green\"\n      }\n    },*/\n    \"& .MuiOutlinedInput-root.Mui-disabled\": {\n      \"& fieldset\": {\n        borderColor: \"green\",\n        backgroundColor: \"rgba(90,90,90,0.1)\"\n      }\n    }\n  }\n})(TextField);\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    spacer: {\n      marginTop: \"2em\",\n      marginBottom: \"2em\"\n    },\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200\n    },\n    dense: {\n      marginTop: 19\n    },\n    menu: {\n      width: 200\n    },\n    formControl: {\n      margin: theme.spacing(1)\n    },\n    returnNegative: {\n      fontWeight: \"bold\",\n      color: \"red\"\n    },\n    returnPositive: {\n      fontWeight: \"bold\",\n      color: \"green\"\n    },\n    button: {\n      margin: theme.spacing(1)\n    },\n    leftIcon: {\n      marginRight: theme.spacing(1)\n    }\n  })\n);\n\nconst App = props => {\n  const INTL = props.intl;\n  const classes = useStyles();\n  const [price, setPrice] = useState(\"\");\n  const [provision, setProvision] = useState(0.0);\n  const [buyingcosts, setBuyingcosts] = useState(12.0);\n  const [interest, setInterest] = useState(1.8); // Zins\n  const [repayment, setRepayment] = useState(2); // Tilgung\n  const [condoFee, setCondoFee] = useState(\"0.00\"); // Hausgeld\n  const [rentIndex, setRentIndex] = useState(\"0.00\"); // Mietspiegel\n  const [rent, setRent] = useState(\"0.00\"); // Mieteinnahmen\n  const [livingSpace, setLivingSpace] = useState(0); // Wohnflaeche\n  const [totalAmount, setTotalAmount] = useState(\"\"); // Gesamtsumme\n  const [pricePerSpace, setPricePerSpace] = useState(\"0.00\"); // Preis pro QM\n  const [interestPerMonth, setInterestPerMonth] = useState(\"\"); // Zinsen / Monat\n  const [repaymentPerMonth, setRepaymentPerMonth] = useState(\"\"); // Tilgung / Monat\n  const [monthlyCosts, setMonthlyCosts] = useState(0); // Monatliche Kosten\n  const [monthlyCostsNoBuyingCosts, setMonthlyCostsNoBuyingCosts] = useState(0); // Monatliche Kosten ohne NK\n  const [monthlyCostsInvest, setMonthlyCostsInvest] = useState(0); // Monatliche Kosten Anlage\n\n  const recalculate = (\n    _price,\n    _provision,\n    _buyingcosts,\n    _livingSpace,\n    _interest,\n    _repayment,\n    _condoFee,\n    _rent,\n    _rentIndex\n  ) => {\n    if (isNaN(_price) || !_price || _price === 0) return;\n    const amt_provision = _price * ((isNaN(_provision) ? 0 : _provision) / 100);\n    const amt_buyingCosts =\n      _price * ((isNaN(_buyingcosts) ? 0 : _buyingcosts) / 100);\n    const amt_total = _price + amt_provision + amt_buyingCosts;\n    const amt_interest_yearly = (amt_total * _interest) / 100;\n    const amt_repayment_yearly = (amt_total * _repayment) / 100;\n    const amt_costs_monthly =\n      amt_interest_yearly / 12 +\n      amt_repayment_yearly / 12 +\n      (isNaN(_condoFee) ? 0 : _condoFee);\n    let amt_costs_monthly_invest = 0;\n    // rent is higher ranked than rentIndex\n    if (\n      (isNaN(_rent) || _rent === 0) &&\n      !isNaN(_rentIndex) &&\n      _rentIndex > 0 &&\n      !isNaN(_livingSpace) &&\n      _livingSpace > 0\n    ) {\n      amt_costs_monthly_invest = amt_costs_monthly - _rentIndex * _livingSpace;\n    } else {\n      amt_costs_monthly_invest = amt_costs_monthly - (isNaN(_rent) ? 0 : _rent);\n    }\n\n    setTotalAmount(amt_total.toString());\n    if (_livingSpace && !isNaN(_livingSpace)) {\n      setPricePerSpace(\n        ((_price + amt_provision) / _livingSpace).toFixed(2).toString()\n      );\n    }\n    setInterestPerMonth((amt_interest_yearly / 12).toFixed(2).toString());\n    setRepaymentPerMonth((amt_repayment_yearly / 12).toFixed(2).toString());\n    setMonthlyCosts(amt_costs_monthly.toFixed(2).toString());\n    // preis + provision\n    // _price + amt_provision\n    // zins = ((_price+amt_provision)*_interest) / 100\n    // tilgung = ((preis+provision)*_repayment) / 100\n    setMonthlyCostsNoBuyingCosts(\n      ((_price + amt_provision) * _interest) / 100 / 12 +\n        ((_price + amt_provision) * _repayment) / 100 / 12 +\n        (isNaN(_condoFee) ? 0 : _condoFee)\n    );\n    setMonthlyCostsInvest(amt_costs_monthly_invest.toFixed(2).toString());\n  };\n\n  const numberFormat = theString => {\n    const r = parseInt(theString.replace(/[^\\d]+/gi, \"\"), 10);\n    return r ? r.toLocaleString(\"de-DE\") : \"\";\n  };\n\n  const getBuyingCostsFormatted = () => {\n    if (price && price !== \"\" && buyingcosts) {\n      const parsedPrice = parseFloat(price.replace(/[^\\d]+/, \"\"));\n      const costs = parsedPrice * (buyingcosts / 100);\n      return formatCurrency(costs);\n    }\n    return \"0,00€\";\n  };\n\n  const formatCurrency = value =>\n    INTL.formatNumber(value, {\n      style: \"currency\",\n      currency: \"EUR\"\n    });\n\n  const proposeRent = () => {\n    if (monthlyCosts && !isNaN(monthlyCosts)) {\n      const v_monthly = parseFloat(monthlyCosts);\n      const wantedRent = v_monthly + v_monthly * 0.04;\n      setRent(Math.round(wantedRent).toString());\n      setRentIndex(\n        livingSpace\n          ? Math.round(Math.round(wantedRent) / livingSpace).toString()\n          : \"0\"\n      );\n      recalculate(\n        str2Float(price),\n        provision,\n        buyingcosts,\n        livingSpace,\n        interest,\n        repayment,\n        str2Float(condoFee),\n        wantedRent,\n        livingSpace ? wantedRent / livingSpace : 0\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <AppBar />\n      <div className={classes.spacer}>\n        <Container maxWidth=\"lg\">\n          <form noValidate autoComplete=\"off\">\n            <Grid container className={classes.root} spacing={2}>\n              <Grid container item className={classes.root} spacing={2} xs={12}>\n                <Grid item xs>\n                  <Rifm\n                    value={price}\n                    onChange={newVal => {\n                      setPrice(newVal);\n                      recalculate(\n                        str2Float(newVal),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <TextField\n                        id=\"buyprice\"\n                        label=\"Kaufpreis\"\n                        className={classes.textField}\n                        value={value}\n                        onChange={onChange}\n                        margin=\"normal\"\n                        type=\"tel\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    )}\n                  </Rifm>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"provision\"\n                    label=\"Maklerprovision\"\n                    className={classes.textField}\n                    value={provision}\n                    onChange={e => {\n                      setProvision(parseFloat(e.target.value));\n                      recalculate(\n                        str2Float(price),\n                        parseFloat(e.target.value),\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      )\n                    }}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"buyingcosts\"\n                    label=\"Kaufnebenkosten\"\n                    className={classes.textField}\n                    value={buyingcosts}\n                    onChange={e => {\n                      setBuyingcosts(parseFloat(e.target.value));\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        parseFloat(e.target.value),\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      )\n                    }}\n                    helperText={getBuyingCostsFormatted()}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"interest\"\n                    label=\"Zins p.a.\"\n                    className={classes.textField}\n                    value={interest}\n                    onChange={e => {\n                      const parsedInterest = parseFloat(\n                        e.target.value.replace(\",\", \".\")\n                      );\n                      setInterest(parsedInterest);\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        parsedInterest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      )\n                    }}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"repayment\"\n                    label=\"Tilgung p.a.\"\n                    className={classes.textField}\n                    value={repayment}\n                    onChange={e => {\n                      setRepayment(parseFloat(e.target.value));\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        parseFloat(e.target.value),\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      )\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container item className={classes.root} spacing={2} xs={12}>\n                <Grid item xs>\n                  <Rifm\n                    value={condoFee}\n                    onChange={newVal => {\n                      setCondoFee(newVal);\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(newVal),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <TextField\n                        id=\"condo-fee\"\n                        label=\"Hausgeld\"\n                        className={classes.textField}\n                        value={value}\n                        onChange={onChange}\n                        margin=\"normal\"\n                        type=\"tel\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    )}\n                  </Rifm>\n                </Grid>\n                <Grid item xs>\n                  <Rifm\n                    value={rentIndex}\n                    onChange={newVal => {\n                      setRentIndex(newVal);\n                      if (livingSpace) {\n                        const newRent = Math.round(\n                          str2Float(newVal) * livingSpace\n                        );\n                        setRent(newRent.toString());\n                        recalculate(\n                          str2Float(price),\n                          provision,\n                          buyingcosts,\n                          livingSpace,\n                          interest,\n                          repayment,\n                          str2Float(condoFee),\n                          newRent,\n                          str2Float(newVal)\n                        );\n                      } else {\n                        recalculate(\n                          str2Float(price),\n                          provision,\n                          buyingcosts,\n                          livingSpace,\n                          interest,\n                          repayment,\n                          str2Float(condoFee),\n                          str2Float(rent),\n                          str2Float(newVal)\n                        );\n                      }\n                    }}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <TextField\n                        id=\"rent-index\"\n                        label=\"Mietspiegel €/m²\"\n                        className={classes.textField}\n                        value={value}\n                        onChange={onChange}\n                        margin=\"normal\"\n                        type=\"tel\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    )}\n                  </Rifm>\n                </Grid>\n                <Grid item xs>\n                  <Rifm\n                    value={rent}\n                    onChange={newVal => {\n                      setRent(newVal);\n                      if (livingSpace) {\n                        setRentIndex(\n                          Math.round(str2Float(newVal) / livingSpace).toString()\n                        );\n                      }\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(newVal),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <TextField\n                        id=\"rent\"\n                        label=\"Mieteinnahmen / Monat\"\n                        className={classes.textField}\n                        value={value}\n                        onChange={onChange}\n                        margin=\"normal\"\n                        type=\"tel\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    )}\n                  </Rifm>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"space\"\n                    label=\"Wohnfläche\"\n                    className={classes.textField}\n                    value={livingSpace}\n                    onChange={e => {\n                      setLivingSpace(parseFloat(e.target.value));\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        parseFloat(e.target.value),\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">m²</InputAdornment>\n                      )\n                    }}\n                  />\n                </Grid>\n                <Grid item xs>\n                  {/*<Rifm\n                    value={totalAmount}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <CssTextField\n                        id=\"total-amount\"\n                        label=\"Gesamtsumme\"\n                        className={classes.textField}\n                        value={value}\n                        margin=\"normal\"\n                        // type=\"number\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                        disabled\n                        variant=\"outlined\"\n                      />\n                    )}\n                      </Rifm>*/}\n                  <CssTextField\n                    id=\"total-amount\"\n                    label=\"Gesamtsumme\"\n                    className={classes.textField}\n                    value={formatCurrency(totalAmount)}\n                    margin=\"normal\"\n                    // type=\"number\"\n                    // InputProps={{\n                    //   endAdornment: (\n                    //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                    //   )\n                    // }}\n                    disabled\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </form>\n        </Container>\n        <Box borderBottom={1} m={2} />\n        <Container maxWidth=\"lg\">\n          <Grid container className={classes.root} spacing={2}>\n            <Grid container item className={classes.root} spacing={2} xs={12}>\n              <Grid item xs>\n                <TextField\n                  id=\"pricePerSpace\"\n                  label=\"€ / m²\"\n                  className={classes.textField}\n                  value={formatCurrency(pricePerSpace)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                />\n              </Grid>\n              <Grid item xs>\n                <TextField\n                  id=\"interestPerMonth\"\n                  label=\"Zinsen / Monat\"\n                  className={classes.textField}\n                  value={formatCurrency(interestPerMonth)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                />\n              </Grid>\n              <Grid item xs>\n                <TextField\n                  id=\"repaymentPerMonth\"\n                  label=\"Tilgung / Monat\"\n                  className={classes.textField}\n                  value={formatCurrency(repaymentPerMonth)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                />\n              </Grid>\n              <Grid item xs>\n                <CssTextField\n                  id=\"monthly-costs\"\n                  label=\"Kosten / Monat\"\n                  className={classes.textField}\n                  value={formatCurrency(monthlyCosts)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                  variant=\"outlined\"\n                  helperText={`Ohne NK: ${formatCurrency(\n                    monthlyCostsNoBuyingCosts\n                  )}`}\n                />\n              </Grid>\n              <Grid item xs>\n                <CssTextField\n                  id=\"monthly-costs\"\n                  label=\"Kosten / Monat (Anlage)\"\n                  className={classes.textField}\n                  value={formatCurrency(monthlyCostsInvest)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                  variant=\"outlined\"\n                  helperText={\n                    parseFloat(monthlyCostsInvest) > 0 ? (\n                      <span className={classes.returnNegative}>Verlust</span>\n                    ) : parseFloat(monthlyCostsInvest) < 0 ? (\n                      <span className={classes.returnPositive}>Gewinn</span>\n                    ) : (\n                      <span />\n                    )\n                  }\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Container>\n        <Container maxWidth=\"lg\">\n          <Grid container className={classes.root} spacing={2}>\n            <Grid item xs={12} />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"small\"\n              className={classes.button}\n              onClick={() => proposeRent()}\n            >\n              <MonetizationOnIcon className={classes.leftIcon} />\n              Miete vorschlagen\n            </Button>\n          </Grid>\n        </Container>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default injectIntl(App);\n","import \"./index.css\";\n\nimport * as de from \"react-intl/locale-data/de\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core\";\n\n// const theme = {\n//   background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\"\n// };\n\naddLocaleData([...de]);\n\nconst theme = createMuiTheme({\n  spacing: 4,\n  palette: {\n    primary: {\n      main: \"#007bff\"\n    }\n  }\n});\n\nReactDOM.render(\n  <IntlProvider locale=\"de\">\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </IntlProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}