{"version":3,"sources":["serviceWorker.js","AppBar.js","utils.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","str2Float","stringValue","parseFloat","replace","CssTextField","withStyles","color","borderBottomColor","borderColor","backgroundColor","TextField","createStyles","spacer","marginTop","marginBottom","container","display","flexWrap","textField","marginLeft","width","dense","menu","formControl","margin","returnNegative","fontWeight","returnPositive","button","leftIcon","bmcButtonImg","boxShadow","border","verticalAlign","bmcButton","padding","lineHeight","height","minWidth","textDecoration","borderRadius","opacity","injectIntl","props","INTL","intl","useState","price","setPrice","provision","setProvision","buyingcosts","setBuyingcosts","interest","setInterest","repayment","setRepayment","condoFee","setCondoFee","rentIndex","setRentIndex","rent","setRent","livingSpace","setLivingSpace","totalAmount","setTotalAmount","pricePerSpace","setPricePerSpace","interestPerMonth","setInterestPerMonth","repaymentPerMonth","setRepaymentPerMonth","monthlyCosts","setMonthlyCosts","monthlyCostsNoBuyingCosts","setMonthlyCostsNoBuyingCosts","monthlyCostsInvest","setMonthlyCostsInvest","recalculate","_price","_provision","_buyingcosts","_livingSpace","_interest","_repayment","_condoFee","_rent","_rentIndex","isNaN","amt_provision","amt_total","amt_interest_yearly","amt_repayment_yearly","amt_costs_monthly","amt_costs_monthly_invest","toString","toFixed","numberFormat","theString","r","parseInt","toLocaleString","formatCurrency","value","formatNumber","style","currency","Fragment","Container","maxWidth","noValidate","autoComplete","Grid","item","xs","onChange","newVal","format","v","id","label","type","InputProps","endAdornment","InputAdornment","e","target","helperText","parsedPrice","getBuyingCostsFormatted","parsedInterest","newRent","Math","round","disabled","Box","borderBottom","m","Button","size","onClick","v_monthly","wantedRent","proposeRent","href","src","alt","fontSize","addLocaleData","de","createMuiTheme","palette","primary","main","ReactDOM","render","locale","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a065088.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: \"center\"\n  }\n}));\n\nconst ButtonAppBar = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/*<IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\"\n          >\n            <MenuIcon />\n          </IconButton>*/}\n          <Typography variant=\"h4\" className={classes.title}>\n            RIK - Robs Immo Kalkulation\n          </Typography>\n          {/*<Button color=\"inherit\">Login</Button>*/}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default ButtonAppBar;\n","/**\n * Number.prototype.format(n, x, s, c)\n *\n * @param integer n: length of decimal\n * @param integer x: length of whole part\n * @param mixed   s: sections delimiter\n * @param mixed   c: decimal delimiter\n */\nexport const formatMoney = (a, n, x, s, c) => {\n  var re = \"\\\\d(?=(\\\\d{\" + (x || 3) + \"})+\" + (n > 0 ? \"\\\\D\" : \"$\") + \")\",\n    num = a.toFixed(Math.max(0, ~~n));\n\n  return (c ? num.replace(\".\", c) : num).replace(\n    new RegExp(re, \"g\"),\n    \"$&\" + (s || \",\")\n  );\n};\n\nexport const str2Float = stringValue =>\n  parseFloat(stringValue.replace(/[^\\d]+/, \"\"));\n\nexport const formatNumber = n => {\n  // format number 1000000 to 1,234,567\n  return n.replace(/\\D/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n};\n","import \"./App.css\";\n\nimport React, { useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/styles\";\n\nimport AppBar from \"./AppBar\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\nimport { Rifm } from \"rifm\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { injectIntl } from \"react-intl\";\nimport { str2Float } from \"./utils\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst CssTextField = withStyles({\n  root: {\n    \"& label.Mui-focused\": {\n      color: \"green\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"green\"\n    },\n    /*\"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"red\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"yellow\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"green\"\n      }\n    },*/\n    \"& .MuiOutlinedInput-root.Mui-disabled\": {\n      \"& fieldset\": {\n        borderColor: \"green\",\n        backgroundColor: \"rgba(90,90,90,0.1)\"\n      }\n    }\n  }\n})(TextField);\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    spacer: {\n      marginTop: \"2em\",\n      marginBottom: \"2em\"\n    },\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200\n    },\n    dense: {\n      marginTop: 19\n    },\n    menu: {\n      width: 200\n    },\n    formControl: {\n      margin: theme.spacing(1)\n    },\n    returnNegative: {\n      fontWeight: \"bold\",\n      color: \"red\"\n    },\n    returnPositive: {\n      fontWeight: \"bold\",\n      color: \"green\"\n    },\n    button: {\n      margin: theme.spacing(1)\n    },\n    leftIcon: {\n      marginRight: theme.spacing(1)\n    },\n    bmcButtonImg: {\n      width: 35,\n      marginBottom: 1,\n      boxShadow: \"none\",\n      border: \"none\",\n      verticalAlign: \"middle\"\n    },\n    bmcButton: {\n      padding: \"7px 10px 7px 10px\",\n      lineHeight: 35,\n      height: 51,\n      minWidth: 217,\n      textDecoration: \"none\",\n      display: \"inline-flex\",\n      color: \"#ffffff\",\n      backgroundColor: \"#79D6B5\",\n      borderRadius: 5,\n      border: \"1px solid transparent\",\n      padding: \"7px 10px 7px 10px\",\n      fontSize: 20,\n      letterSpacing: 0.6,\n      boxShadow: \"0px 1px 2px rgba(190, 190, 190, 0.5)\",\n      \"-webkit-box-shadow\": \"0px 1px 2px 2px rgba(190, 190, 190, 0.5)\",\n      margin: \"0 auto\",\n      fontFamily: '\"Arial\", cursive',\n      \"-webkit-box-sizing\": \"border-box\",\n      boxSizing: \"border-box\",\n      \"-o-transition\": \"0.3s all linear\",\n      \"-webkit-transition\": \"0.3s all linear\",\n      \"-moz-transition\": \"0.3s all linear\",\n      \"-ms-transition\": \"0.3s all linear\",\n      transition: \"0.3s all linear\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n        boxShadow: \"0px 1px 2px 2px rgba(190, 190, 190, 0.5)\",\n        opacity: 0.85,\n        color: \"#ffffff\"\n      },\n      \"&:focus\": {\n        textDecoration: \"none\",\n        boxShadow: \"0px 1px 2px 2px rgba(190, 190, 190, 0.5)\",\n        opacity: 0.85,\n        color: \"#ffffff\"\n      },\n      \"&:active\": {\n        textDecoration: \"none\",\n        boxShadow: \"0px 1px 2px 2px rgba(190, 190, 190, 0.5)\",\n        opacity: 0.85,\n        color: \"#ffffff\"\n      }\n    }\n  })\n);\n\nconst App = props => {\n  const INTL = props.intl;\n  const classes = useStyles();\n  const [price, setPrice] = useState(\"\");\n  const [provision, setProvision] = useState(0.0);\n  const [buyingcosts, setBuyingcosts] = useState(6.5);\n  const [interest, setInterest] = useState(1.8); // Zins\n  const [repayment, setRepayment] = useState(2); // Tilgung\n  const [condoFee, setCondoFee] = useState(\"0.00\"); // Hausgeld\n  const [rentIndex, setRentIndex] = useState(\"0.00\"); // Mietspiegel\n  const [rent, setRent] = useState(\"0.00\"); // Mieteinnahmen\n  const [livingSpace, setLivingSpace] = useState(0); // Wohnflaeche\n  const [totalAmount, setTotalAmount] = useState(\"\"); // Gesamtsumme\n  const [pricePerSpace, setPricePerSpace] = useState(\"0.00\"); // Preis pro QM\n  const [interestPerMonth, setInterestPerMonth] = useState(\"\"); // Zinsen / Monat\n  const [repaymentPerMonth, setRepaymentPerMonth] = useState(\"\"); // Tilgung / Monat\n  const [monthlyCosts, setMonthlyCosts] = useState(0); // Monatliche Kosten\n  const [monthlyCostsNoBuyingCosts, setMonthlyCostsNoBuyingCosts] = useState(0); // Monatliche Kosten ohne NK\n  const [monthlyCostsInvest, setMonthlyCostsInvest] = useState(0); // Monatliche Kosten Anlage\n\n  const recalculate = (\n    _price,\n    _provision,\n    _buyingcosts,\n    _livingSpace,\n    _interest,\n    _repayment,\n    _condoFee,\n    _rent,\n    _rentIndex\n  ) => {\n    if (isNaN(_price) || !_price || _price === 0) return;\n    const amt_provision = _price * ((isNaN(_provision) ? 0 : _provision) / 100);\n    const amt_buyingCosts =\n      _price * ((isNaN(_buyingcosts) ? 0 : _buyingcosts) / 100);\n    const amt_total = _price + amt_provision + amt_buyingCosts;\n    const amt_interest_yearly = (amt_total * _interest) / 100;\n    const amt_repayment_yearly = (amt_total * _repayment) / 100;\n    const amt_costs_monthly =\n      amt_interest_yearly / 12 +\n      amt_repayment_yearly / 12 +\n      (isNaN(_condoFee) ? 0 : _condoFee);\n    let amt_costs_monthly_invest = 0;\n    // rent is higher ranked than rentIndex\n    if (\n      (isNaN(_rent) || _rent === 0) &&\n      !isNaN(_rentIndex) &&\n      _rentIndex > 0 &&\n      !isNaN(_livingSpace) &&\n      _livingSpace > 0\n    ) {\n      amt_costs_monthly_invest = amt_costs_monthly - _rentIndex * _livingSpace;\n    } else {\n      amt_costs_monthly_invest = amt_costs_monthly - (isNaN(_rent) ? 0 : _rent);\n    }\n\n    setTotalAmount(amt_total.toString());\n    if (_livingSpace && !isNaN(_livingSpace)) {\n      setPricePerSpace(\n        ((_price + amt_provision) / _livingSpace).toFixed(2).toString()\n      );\n    }\n    setInterestPerMonth((amt_interest_yearly / 12).toFixed(2).toString());\n    setRepaymentPerMonth((amt_repayment_yearly / 12).toFixed(2).toString());\n    setMonthlyCosts(amt_costs_monthly.toFixed(2).toString());\n    // preis + provision\n    // _price + amt_provision\n    // zins = ((_price+amt_provision)*_interest) / 100\n    // tilgung = ((preis+provision)*_repayment) / 100\n    setMonthlyCostsNoBuyingCosts(\n      ((_price + amt_provision) * _interest) / 100 / 12 +\n        ((_price + amt_provision) * _repayment) / 100 / 12 +\n        (isNaN(_condoFee) ? 0 : _condoFee)\n    );\n    setMonthlyCostsInvest(amt_costs_monthly_invest.toFixed(2).toString());\n  };\n\n  const numberFormat = theString => {\n    const r = parseInt(theString.replace(/[^\\d]+/gi, \"\"), 10);\n    return r ? r.toLocaleString(\"de-DE\") : \"\";\n  };\n\n  const getBuyingCostsFormatted = () => {\n    if (price && price !== \"\" && buyingcosts) {\n      const parsedPrice = parseFloat(price.replace(/[^\\d]+/, \"\"));\n      const costs = parsedPrice * (buyingcosts / 100);\n      return formatCurrency(costs);\n    }\n    return \"0,00€\";\n  };\n\n  const formatCurrency = value =>\n    INTL.formatNumber(value, {\n      style: \"currency\",\n      currency: \"EUR\"\n    });\n\n  const proposeRent = () => {\n    if (monthlyCosts && !isNaN(monthlyCosts)) {\n      const v_monthly = parseFloat(monthlyCosts);\n      const wantedRent = v_monthly + v_monthly * 0.04;\n      setRent(Math.round(wantedRent).toString());\n      setRentIndex(\n        livingSpace\n          ? Math.round(Math.round(wantedRent) / livingSpace).toString()\n          : \"0\"\n      );\n      recalculate(\n        str2Float(price),\n        provision,\n        buyingcosts,\n        livingSpace,\n        interest,\n        repayment,\n        str2Float(condoFee),\n        wantedRent,\n        livingSpace ? wantedRent / livingSpace : 0\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <AppBar />\n      <div className={classes.spacer}>\n        <Container maxWidth=\"lg\">\n          <form noValidate autoComplete=\"off\">\n            <Grid container className={classes.root} spacing={2}>\n              <Grid container item className={classes.root} spacing={2} xs={12}>\n                <Grid item xs>\n                  <Rifm\n                    value={price}\n                    onChange={newVal => {\n                      setPrice(newVal);\n                      recalculate(\n                        str2Float(newVal),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <TextField\n                        id=\"buyprice\"\n                        label=\"Kaufpreis\"\n                        className={classes.textField}\n                        value={value}\n                        onChange={onChange}\n                        margin=\"normal\"\n                        type=\"tel\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    )}\n                  </Rifm>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"provision\"\n                    label=\"Maklerprovision\"\n                    className={classes.textField}\n                    value={provision}\n                    onChange={e => {\n                      setProvision(parseFloat(e.target.value));\n                      recalculate(\n                        str2Float(price),\n                        parseFloat(e.target.value),\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      )\n                    }}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"buyingcosts\"\n                    label=\"Kaufnebenkosten\"\n                    className={classes.textField}\n                    value={buyingcosts}\n                    onChange={e => {\n                      setBuyingcosts(parseFloat(e.target.value));\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        parseFloat(e.target.value),\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      )\n                    }}\n                    helperText={getBuyingCostsFormatted()}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"interest\"\n                    label=\"Zins p.a.\"\n                    className={classes.textField}\n                    value={interest}\n                    onChange={e => {\n                      const parsedInterest = parseFloat(\n                        e.target.value.replace(\",\", \".\")\n                      );\n                      setInterest(parsedInterest);\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        parsedInterest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      )\n                    }}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"repayment\"\n                    label=\"Tilgung p.a.\"\n                    className={classes.textField}\n                    value={repayment}\n                    onChange={e => {\n                      setRepayment(parseFloat(e.target.value));\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        parseFloat(e.target.value),\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      )\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container item className={classes.root} spacing={2} xs={12}>\n                <Grid item xs>\n                  <Rifm\n                    value={condoFee}\n                    onChange={newVal => {\n                      setCondoFee(newVal);\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(newVal),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <TextField\n                        id=\"condo-fee\"\n                        label=\"Hausgeld\"\n                        className={classes.textField}\n                        value={value}\n                        onChange={onChange}\n                        margin=\"normal\"\n                        type=\"tel\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    )}\n                  </Rifm>\n                </Grid>\n                <Grid item xs>\n                  <Rifm\n                    value={rentIndex}\n                    onChange={newVal => {\n                      setRentIndex(newVal);\n                      if (livingSpace) {\n                        const newRent = Math.round(\n                          str2Float(newVal) * livingSpace\n                        );\n                        setRent(newRent.toString());\n                        recalculate(\n                          str2Float(price),\n                          provision,\n                          buyingcosts,\n                          livingSpace,\n                          interest,\n                          repayment,\n                          str2Float(condoFee),\n                          newRent,\n                          str2Float(newVal)\n                        );\n                      } else {\n                        recalculate(\n                          str2Float(price),\n                          provision,\n                          buyingcosts,\n                          livingSpace,\n                          interest,\n                          repayment,\n                          str2Float(condoFee),\n                          str2Float(rent),\n                          str2Float(newVal)\n                        );\n                      }\n                    }}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <TextField\n                        id=\"rent-index\"\n                        label=\"Mietspiegel €/m²\"\n                        className={classes.textField}\n                        value={value}\n                        onChange={onChange}\n                        margin=\"normal\"\n                        type=\"tel\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    )}\n                  </Rifm>\n                </Grid>\n                <Grid item xs>\n                  <Rifm\n                    value={rent}\n                    onChange={newVal => {\n                      setRent(newVal);\n                      if (livingSpace) {\n                        setRentIndex(\n                          Math.round(str2Float(newVal) / livingSpace).toString()\n                        );\n                      }\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        livingSpace,\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(newVal),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <TextField\n                        id=\"rent\"\n                        label=\"Mieteinnahmen / Monat\"\n                        className={classes.textField}\n                        value={value}\n                        onChange={onChange}\n                        margin=\"normal\"\n                        type=\"tel\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    )}\n                  </Rifm>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"space\"\n                    label=\"Wohnfläche\"\n                    className={classes.textField}\n                    value={livingSpace}\n                    onChange={e => {\n                      setLivingSpace(parseFloat(e.target.value));\n                      recalculate(\n                        str2Float(price),\n                        provision,\n                        buyingcosts,\n                        parseFloat(e.target.value),\n                        interest,\n                        repayment,\n                        str2Float(condoFee),\n                        str2Float(rent),\n                        str2Float(rentIndex)\n                      );\n                    }}\n                    margin=\"normal\"\n                    type=\"number\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">m²</InputAdornment>\n                      )\n                    }}\n                  />\n                </Grid>\n                <Grid item xs>\n                  {/*<Rifm\n                    value={totalAmount}\n                    format={numberFormat}\n                    replace={v => v.replace(\",\", \".\")}\n                  >\n                    {({ value, onChange }) => (\n                      <CssTextField\n                        id=\"total-amount\"\n                        label=\"Gesamtsumme\"\n                        className={classes.textField}\n                        value={value}\n                        margin=\"normal\"\n                        // type=\"number\"\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              &euro;\n                            </InputAdornment>\n                          )\n                        }}\n                        disabled\n                        variant=\"outlined\"\n                      />\n                    )}\n                      </Rifm>*/}\n                  <CssTextField\n                    id=\"total-amount\"\n                    label=\"Gesamtsumme\"\n                    className={classes.textField}\n                    value={formatCurrency(totalAmount)}\n                    margin=\"normal\"\n                    // type=\"number\"\n                    // InputProps={{\n                    //   endAdornment: (\n                    //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                    //   )\n                    // }}\n                    disabled\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </form>\n        </Container>\n        <Box borderBottom={1} m={2} />\n        <Container maxWidth=\"lg\">\n          <Grid container className={classes.root} spacing={2}>\n            <Grid container item className={classes.root} spacing={2} xs={12}>\n              <Grid item xs>\n                <TextField\n                  id=\"pricePerSpace\"\n                  label=\"€ / m²\"\n                  className={classes.textField}\n                  value={formatCurrency(pricePerSpace)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                />\n              </Grid>\n              <Grid item xs>\n                <TextField\n                  id=\"interestPerMonth\"\n                  label=\"Zinsen / Monat\"\n                  className={classes.textField}\n                  value={formatCurrency(interestPerMonth)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                />\n              </Grid>\n              <Grid item xs>\n                <TextField\n                  id=\"repaymentPerMonth\"\n                  label=\"Tilgung / Monat\"\n                  className={classes.textField}\n                  value={formatCurrency(repaymentPerMonth)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                />\n              </Grid>\n              <Grid item xs>\n                <CssTextField\n                  id=\"monthly-costs\"\n                  label=\"Kosten / Monat\"\n                  className={classes.textField}\n                  value={formatCurrency(monthlyCosts)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                  variant=\"outlined\"\n                  helperText={`Ohne NK: ${formatCurrency(\n                    monthlyCostsNoBuyingCosts\n                  )}`}\n                />\n              </Grid>\n              <Grid item xs>\n                <CssTextField\n                  id=\"monthly-costs\"\n                  label=\"Kosten / Monat (Anlage)\"\n                  className={classes.textField}\n                  value={formatCurrency(monthlyCostsInvest)}\n                  margin=\"normal\"\n                  // type=\"number\"\n                  // InputProps={{\n                  //   endAdornment: (\n                  //     <InputAdornment position=\"end\">&euro;</InputAdornment>\n                  //   )\n                  // }}\n                  disabled\n                  variant=\"outlined\"\n                  helperText={\n                    parseFloat(monthlyCostsInvest) > 0 ? (\n                      <span className={classes.returnNegative}>Verlust</span>\n                    ) : parseFloat(monthlyCostsInvest) < 0 ? (\n                      <span className={classes.returnPositive}>Gewinn</span>\n                    ) : (\n                      <span />\n                    )\n                  }\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Container>\n        <Container maxWidth=\"lg\">\n          <Grid container className={classes.root} spacing={2}>\n            <Grid item xs={12} />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"small\"\n              className={classes.button}\n              onClick={() => proposeRent()}\n            >\n              <MonetizationOnIcon className={classes.leftIcon} />\n              Miete vorschlagen\n            </Button>\n            <a href=\"https://www.sparkasse.de/service/rechner/nebenkostenrechner.html\">\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                className={classes.button}\n              >\n                SPK NK Rechner\n              </Button>\n            </a>\n          </Grid>\n          <a\n            className={classes.bmcButton}\n            target=\"_blank\"\n            href=\"https://www.buymeacoffee.com/Robs\"\n          >\n            <img\n              className={classes.bmcButtonImg}\n              src=\"https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg\"\n              alt=\"Kauf mir einen Kaffee\"\n            />\n            <span style={{ marginLeft: 15, fontSize: 19 }}>\n              Kauf mir einen Kaffee\n            </span>\n          </a>\n        </Container>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default injectIntl(App);\n","import \"./index.css\";\n\nimport * as de from \"react-intl/locale-data/de\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core\";\n\n// const theme = {\n//   background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\"\n// };\n\naddLocaleData([...de]);\n\nconst theme = createMuiTheme({\n  spacing: 4,\n  palette: {\n    primary: {\n      main: \"#007bff\"\n    }\n  }\n});\n\nReactDOM.render(\n  <IntlProvider locale=\"de\">\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </IntlProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}