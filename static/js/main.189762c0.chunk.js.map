{"version":3,"sources":["serviceWorker.js","AppBar.js","utils.js","App.js","parser.js","index.js"],"names":["Boolean","window","location","hostname","match","ButtonAppBar","header","style","backgroundColor","toDecimal","val","toFixed","Math","max","calcCommissionAmt","price","commissionPct","res","parseFloat","calcGrandTotalBuying","buycostPct","calcInterestPerMonthAmt","totalCredit","interestPct","calcRepaymentPerMonthAmt","repayPct","injectIntl","props","INTL","intl","useLocation","useState","setPrice","provision","setProvision","buyingcosts","setBuyingcosts","interest","setInterest","repayment","setRepayment","condoFee","setCondoFee","rentIndex","setRentIndex","rent","setRent","livingSpace","setLivingSpace","totalAmount","setTotalAmount","pricePerSpace","setPricePerSpace","interestPerMonth","setInterestPerMonth","repaymentPerMonth","setRepaymentPerMonth","monthlyCosts","setMonthlyCosts","monthlyCostsNoBuyingCosts","setMonthlyCostsNoBuyingCosts","monthlyCostsInvest","setMonthlyCostsInvest","useEffect","params","qs","parse","search","ignoreQueryPrefix","hasOwnProperty","console","log","url","is","parseInt","recalculate","_price","_provision","_buyingcosts","_livingSpace","_interest","_repayment","_condoFee","_rent","_rentIndex","isNaN","amt_total","amt_total_nbc","amt_interest_monthly","amt_repayment_monthly","amt_costs_monthly","amt_costs_monthly_invest","toString","sqm","calcPricePerSQM","formatCurrency","value","formatNumber","currency","Fragment","AppBar","noValidate","autoComplete","className","onSubmit","e","preventDefault","htmlFor","id","onValueChange","parsed","mode","locale","minFractionDigits","suffix","costs","getCommissionCostsFormatted","calcBuycostsAmt","getBuyingCostsFormatted","parsedInterest","newRent","round","disabled","legend","label","icon","onClick","wantedRent","href","target","src","alt","marginLeft","fontSize","addLocaleData","de","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.189762c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Panel } from \"primereact/panel\";\n\nconst ButtonAppBar = () => {\n  return (\n    <Panel\n      header=\"RIK - Robs Immo Kalkulation\"\n      style={{ backgroundColor: \"#007bff\" }}\n    />\n  );\n};\n\nexport default ButtonAppBar;\n","/**\n * Number.prototype.format(n, x, s, c)\n *\n * @param integer n: length of decimal\n * @param integer x: length of whole part\n * @param mixed   s: sections delimiter\n * @param mixed   c: decimal delimiter\n */\nexport const formatMoney = (a, n, x, s, c) => {\n\tvar re = \"\\\\d(?=(\\\\d{\" + (x || 3) + \"})+\" + (n > 0 ? \"\\\\D\" : \"$\") + \")\",\n\t\tnum = a.toFixed(Math.max(0, ~~n));\n\n\treturn (c ? num.replace(\".\", c) : num).replace(\n\t\tnew RegExp(re, \"g\"),\n\t\t\"$&\" + (s || \",\")\n\t);\n};\n\nexport const str2Float = stringValue =>\n\tparseFloat(stringValue.replace(/[^\\d]+/, \"\"));\n\nexport const formatNumber = n => {\n\t// format number 1000000 to 1,234,567\n\treturn n.replace(/\\D/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n};\n\nexport const toDecimal = val => val.toFixed(Math.max(0, ~~2));\n\nexport const calcPricePerSQM = (price = 0, sqm = 0) => {\n\treturn toDecimal(price / sqm);\n};\n\nexport const calcCommissionAmt = (price = 0, commissionPct = 0) => {\n\tlet res = parseFloat(0);\n\n\tif (commissionPct > 0) {\n\t\tres = price * (commissionPct / 100);\n\t}\n\n\treturn toDecimal(res);\n};\n\nexport const calcBuycostsAmt = (price = 0, buycostPct = 0) => {\n\tlet res = parseFloat(0);\n\n\tif (buycostPct > 0) {\n\t\tres = price * (buycostPct / 100);\n\t}\n\n\treturn toDecimal(res);\n};\n\nexport const calcGrandTotalBuying = (\n\tprice = 0,\n\tcommissionPct = 0,\n\tbuycostPct = 0\n) => {\n\tlet res = parseFloat(price);\n\tif (commissionPct > 0) {\n\t\tres = res + res * (commissionPct / 100);\n\t}\n\tif (buycostPct > 0) {\n\t\tres = res + res * (buycostPct / 100);\n\t}\n\n\treturn toDecimal(res);\n};\n\nexport const calcInterestPerMonthAmt = (totalCredit = 0, interestPct = 0) =>\n\tparseFloat((totalCredit * interestPct) / 100 / 12);\nexport const calcRepaymentPerMonthAmt = (totalCredit = 0, repayPct = 0) =>\n\tparseFloat((totalCredit * repayPct) / 100 / 12);\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport AppBar from \"./AppBar\";\nimport { injectIntl } from \"react-intl\";\nimport { InputNumber } from \"primereact/inputnumber\";\nimport { Fieldset } from \"primereact/fieldset\";\nimport { Button } from \"primereact/button\";\nimport { useLocation } from \"react-router-dom\";\nimport qs from \"qs\";\nimport { parseImmoScout } from \"./parser\";\nimport {\n  calcPricePerSQM,\n  calcGrandTotalBuying,\n  calcCommissionAmt,\n  calcBuycostsAmt,\n  calcInterestPerMonthAmt,\n  calcRepaymentPerMonthAmt\n} from \"./utils\";\n\nconst App = props => {\n  const INTL = props.intl;\n  let location = useLocation();\n  const [price, setPrice] = useState(\"\");\n  const [provision, setProvision] = useState(0.0);\n  const [buyingcosts, setBuyingcosts] = useState(6.5);\n  const [interest, setInterest] = useState(1.2); // Zins\n  const [repayment, setRepayment] = useState(2); // Tilgung\n  const [condoFee, setCondoFee] = useState(0.0); // Hausgeld\n  const [rentIndex, setRentIndex] = useState(0.0); // Mietspiegel\n  const [rent, setRent] = useState(0.0); // Mieteinnahmen\n  const [livingSpace, setLivingSpace] = useState(0); // Wohnflaeche\n  const [totalAmount, setTotalAmount] = useState(\"\"); // Gesamtsumme\n  const [pricePerSpace, setPricePerSpace] = useState(0.0); // Preis pro QM\n  const [interestPerMonth, setInterestPerMonth] = useState(0.0); // Zinsen / Monat\n  const [repaymentPerMonth, setRepaymentPerMonth] = useState(0.0); // Tilgung / Monat\n  const [monthlyCosts, setMonthlyCosts] = useState(0); // Monatliche Kosten\n  const [monthlyCostsNoBuyingCosts, setMonthlyCostsNoBuyingCosts] = useState(0); // Monatliche Kosten ohne NK\n  const [monthlyCostsInvest, setMonthlyCostsInvest] = useState(0); // Monatliche Kosten Anlage\n\n  useEffect(() => {\n    if (location) {\n      const params = qs.parse(location.search, { ignoreQueryPrefix: true });\n      if (params && params.hasOwnProperty(\"is\")) {\n        // get immoscout url\n        console.log(parseImmoScout(params.is));\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (livingSpace) {\n      setRentIndex(parseFloat(rent) / parseInt(livingSpace));\n    }\n  }, [rent]);\n\n  useEffect(() => {\n    if (rent) {\n      setRentIndex(parseFloat(rent) / parseInt(livingSpace));\n    } else if (rentIndex) {\n      setRent(parseFloat(rentIndex) * parseInt(livingSpace));\n    }\n  }, [livingSpace]);\n\n  const recalculate = (\n    _price,\n    _provision,\n    _buyingcosts,\n    _livingSpace,\n    _interest,\n    _repayment,\n    _condoFee,\n    _rent,\n    _rentIndex\n  ) => {\n    if (isNaN(_price) || !_price || _price === 0) return;\n    const amt_provision = calcCommissionAmt(_price, _provision);\n    const amt_total = calcGrandTotalBuying(_price, _provision, _buyingcosts);\n    // no buying costs\n    const amt_total_nbc = calcGrandTotalBuying(_price, _provision, 0);\n    const amt_interest_monthly = calcInterestPerMonthAmt(amt_total, _interest);\n    const amt_repayment_monthly = calcRepaymentPerMonthAmt(\n      amt_total,\n      _repayment\n    );\n    const amt_costs_monthly =\n      amt_interest_monthly +\n      amt_repayment_monthly +\n      (isNaN(_condoFee) ? 0 : _condoFee);\n    let amt_costs_monthly_invest = 0;\n    // rent is higher ranked than rentIndex\n    if (\n      (isNaN(_rent) || _rent === 0) &&\n      !isNaN(_rentIndex) &&\n      _rentIndex > 0 &&\n      !isNaN(_livingSpace) &&\n      _livingSpace > 0\n    ) {\n      amt_costs_monthly_invest = amt_costs_monthly - _rentIndex * _livingSpace;\n    } else {\n      amt_costs_monthly_invest = amt_costs_monthly - (isNaN(_rent) ? 0 : _rent);\n    }\n\n    setTotalAmount(amt_total.toString());\n    if (_livingSpace && !isNaN(_livingSpace)) {\n      setPricePerSpace(calcPricePerSQM(_price, _livingSpace));\n    }\n    setInterestPerMonth(amt_interest_monthly.toString());\n    setRepaymentPerMonth(amt_repayment_monthly.toString());\n    setMonthlyCosts(amt_costs_monthly.toFixed(2).toString());\n    setMonthlyCostsNoBuyingCosts(\n      calcInterestPerMonthAmt(amt_total_nbc, _interest) +\n        calcRepaymentPerMonthAmt(amt_total_nbc, _repayment) +\n        (isNaN(_condoFee) ? 0 : _condoFee)\n    );\n    setMonthlyCostsInvest(amt_costs_monthly_invest.toFixed(2).toString());\n  };\n\n  const numberFormat = theString => {\n    const r = parseFloat(theString, 10);\n    return r ? r.toLocaleString(\"de-DE\") : \"\";\n  };\n\n  const getBuyingCostsFormatted = () => {\n    const costs = calcBuycostsAmt(price, buyingcosts);\n    return formatCurrency(costs);\n  };\n\n  const getCommissionCostsFormatted = () => {\n    const costs = calcCommissionAmt(price, provision);\n    return formatCurrency(costs);\n  };\n\n  const formatCurrency = value =>\n    INTL.formatNumber(value, {\n      style: \"currency\",\n      currency: \"EUR\"\n    });\n\n  const calcRendite = () => {\n    return ((rent * 12 * 100) / parseFloat(price)).toFixed(2);\n  };\n\n  const proposeRent = () => {\n    const wantedRent = (parseFloat(price) * 6) / 100 / 12;\n    setRent(Math.round(wantedRent));\n    setRentIndex(\n      livingSpace ? Math.round(Math.round(wantedRent) / livingSpace) : 0\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <AppBar />\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className=\"p-m-4\"\n        onSubmit={e => e.preventDefault()}\n      >\n        <div className=\"p-fluid p-formgrid p-grid\">\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"fprice\">Kaufpreis</label>\n            <InputNumber\n              id=\"fprice\"\n              value={price}\n              onValueChange={e => {\n                const parsed = parseFloat(e.value) || 0;\n                setPrice(parsed);\n                recalculate(\n                  parseFloat(parsed),\n                  provision,\n                  buyingcosts,\n                  livingSpace,\n                  interest,\n                  repayment,\n                  parseFloat(condoFee),\n                  parseFloat(rent),\n                  parseFloat(rentIndex)\n                );\n              }}\n              mode=\"currency\"\n              currency=\"EUR\"\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              &nbsp;\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"fprovision\">Maklerprovision</label>\n            <InputNumber\n              id=\"fprovision\"\n              value={provision}\n              onValueChange={e => {\n                setProvision(e.value);\n                if (!e.value || !parseFloat(e.value)) return;\n                recalculate(\n                  parseFloat(price),\n                  parseFloat(e.value),\n                  buyingcosts,\n                  livingSpace,\n                  interest,\n                  repayment,\n                  parseFloat(condoFee),\n                  parseFloat(rent),\n                  parseFloat(rentIndex)\n                );\n              }}\n              suffix=\"%\"\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fprovision-help\" className=\"p-d-block\">\n              {getCommissionCostsFormatted()}\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"fbuyingcosts\">Kaufnebenkosten</label>\n            <InputNumber\n              id=\"fbuyingcosts\"\n              value={buyingcosts}\n              suffix=\"%\"\n              onValueChange={e => {\n                setBuyingcosts(e.value);\n                if (!parseFloat(e.value)) return;\n                recalculate(\n                  parseFloat(price),\n                  provision,\n                  parseFloat(e.value),\n                  livingSpace,\n                  interest,\n                  repayment,\n                  parseFloat(condoFee),\n                  parseFloat(rent),\n                  parseFloat(rentIndex)\n                );\n              }}\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              {getBuyingCostsFormatted()}\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"finterest\">Zins p.a.</label>\n            <InputNumber\n              id=\"finterest\"\n              value={interest}\n              suffix=\"%\"\n              onValueChange={e => {\n                setInterest(e.value);\n                if (!e.value || !parseFloat(e.value)) return;\n                const parsedInterest = parseFloat(e.value);\n                recalculate(\n                  parseFloat(price),\n                  provision,\n                  buyingcosts,\n                  livingSpace,\n                  parsedInterest,\n                  repayment,\n                  parseFloat(condoFee),\n                  parseFloat(rent),\n                  parseFloat(rentIndex)\n                );\n              }}\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              &nbsp;\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"frepayment\">Tilgung p.a.</label>\n            <InputNumber\n              id=\"frepayment\"\n              value={repayment}\n              suffix=\"%\"\n              onValueChange={e => {\n                setRepayment(parseFloat(e.value));\n                recalculate(\n                  parseFloat(price),\n                  provision,\n                  buyingcosts,\n                  livingSpace,\n                  interest,\n                  parseFloat(e.value),\n                  parseFloat(condoFee),\n                  parseFloat(rent),\n                  parseFloat(rentIndex)\n                );\n              }}\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              &nbsp;\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"fcondoFee\">Hausgeld</label>\n            <InputNumber\n              id=\"fcondoFee\"\n              value={condoFee}\n              onValueChange={e => {\n                setCondoFee(parseFloat(e.value));\n                recalculate(\n                  parseFloat(price),\n                  provision,\n                  buyingcosts,\n                  livingSpace,\n                  interest,\n                  repayment,\n                  parseFloat(e.value),\n                  parseFloat(rent),\n                  parseFloat(rentIndex)\n                );\n              }}\n              mode=\"currency\"\n              currency=\"EUR\"\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              &nbsp;\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"frentIndex\">Mietspiegel €/m²</label>\n            <InputNumber\n              id=\"frentIndex\"\n              value={rentIndex}\n              onValueChange={e => {\n                setRentIndex(parseFloat(e.value));\n                if (livingSpace) {\n                  const newRent = Math.round(parseFloat(e.value) * livingSpace);\n                  setRent(newRent.toString());\n                  recalculate(\n                    parseFloat(price),\n                    provision,\n                    buyingcosts,\n                    livingSpace,\n                    interest,\n                    repayment,\n                    parseFloat(condoFee),\n                    newRent,\n                    parseFloat(e.value)\n                  );\n                } else {\n                  recalculate(\n                    parseFloat(price),\n                    provision,\n                    buyingcosts,\n                    livingSpace,\n                    interest,\n                    repayment,\n                    parseFloat(condoFee),\n                    parseFloat(rent),\n                    parseFloat(e.value)\n                  );\n                }\n              }}\n              mode=\"currency\"\n              currency=\"EUR\"\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              &nbsp;\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"frent\">Mieteinnahmen / Monat</label>\n            <InputNumber\n              id=\"frent\"\n              value={rent}\n              onValueChange={e => {\n                setRent(e.value);\n                if (livingSpace) {\n                  setRentIndex(\n                    Math.round(parseFloat(e.value) / livingSpace).toString()\n                  );\n                }\n                recalculate(\n                  parseFloat(price),\n                  provision,\n                  buyingcosts,\n                  livingSpace,\n                  interest,\n                  repayment,\n                  parseFloat(condoFee),\n                  parseFloat(e.value),\n                  parseFloat(rentIndex)\n                );\n              }}\n              mode=\"currency\"\n              currency=\"EUR\"\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              &nbsp;\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"flivingSpace\">Wohnfläche</label>\n            <InputNumber\n              id=\"flivingSpace\"\n              value={livingSpace}\n              onValueChange={e => {\n                setLivingSpace(parseFloat(e.value));\n                recalculate(\n                  parseFloat(price),\n                  provision,\n                  buyingcosts,\n                  parseFloat(e.value),\n                  interest,\n                  repayment,\n                  parseFloat(condoFee),\n                  parseFloat(rent),\n                  parseFloat(rentIndex)\n                );\n              }}\n              suffix=\" m²\"\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              &nbsp;\n            </small>\n          </div>\n          <div className=\"p-field p-col-12 p-md-3 p-grid\">\n            <label htmlFor=\"ftotalamount\">Gesamtsumme</label>\n            <InputNumber\n              id=\"ftotalamount\"\n              value={totalAmount}\n              disabled\n              mode=\"currency\"\n              currency=\"EUR\"\n              locale=\"de-DE\"\n              minFractionDigits={2}\n            />\n            <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n              &nbsp;\n            </small>\n          </div>\n        </div>\n        <Fieldset legend=\"Ergebnis\">\n          <div className=\"p-fluid p-formgrid p-grid\">\n            <div className=\"p-field p-col-12 p-md-3 p-grid\">\n              <label htmlFor=\"fpriceperspace\">€ / m²</label>\n              <InputNumber\n                id=\"fpriceperspace\"\n                value={pricePerSpace}\n                disabled\n                mode=\"currency\"\n                currency=\"EUR\"\n                locale=\"de-DE\"\n                minFractionDigits={2}\n              />\n              <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n                &nbsp;\n              </small>\n            </div>\n            <div className=\"p-field p-col-12 p-md-3 p-grid\">\n              <label htmlFor=\"finterestPerMonth\">Zinsen / Monat</label>\n              <InputNumber\n                id=\"finterestPerMonth\"\n                value={interestPerMonth}\n                disabled\n                mode=\"currency\"\n                currency=\"EUR\"\n                locale=\"de-DE\"\n                minFractionDigits={2}\n              />\n              <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n                &nbsp;\n              </small>\n            </div>\n            <div className=\"p-field p-col-12 p-md-3 p-grid\">\n              <label htmlFor=\"frepaymentPerMonth\">Tilgung / Monat</label>\n              <InputNumber\n                id=\"frepaymentPerMonth\"\n                value={repaymentPerMonth}\n                disabled\n                mode=\"currency\"\n                currency=\"EUR\"\n                locale=\"de-DE\"\n                minFractionDigits={2}\n              />\n              <small id=\"fbuyingcosts-help\" className=\"p-d-block\">\n                &nbsp;\n              </small>\n            </div>\n            <div className=\"p-field p-col-12 p-md-3 p-grid\">\n              <label htmlFor=\"fmonthlyCosts\">Kosten / Monat</label>\n              <InputNumber\n                id=\"fmonthlyCosts\"\n                value={monthlyCosts}\n                disabled\n                mode=\"currency\"\n                currency=\"EUR\"\n                locale=\"de-DE\"\n                minFractionDigits={2}\n              />\n              <small\n                id=\"fmonthlyCosts-help\"\n                className=\"p-d-block\"\n              >{`Ohne NK: ${formatCurrency(monthlyCostsNoBuyingCosts)}`}</small>\n            </div>\n            <div className=\"p-field p-col-12 p-md-3 p-grid\">\n              <label htmlFor=\"fmonthlyCostsInvest\">\n                Kosten / Monat (Anlage)\n              </label>\n              <InputNumber\n                id=\"fmonthlyCostsInvest\"\n                value={monthlyCostsInvest}\n                disabled\n                mode=\"currency\"\n                currency=\"EUR\"\n                locale=\"de-DE\"\n                minFractionDigits={2}\n              />\n              <small id=\"fmonthlyCostsInvest-help\" className=\"p-d-block\">\n                {`${calcRendite()} % - `}\n                {parseFloat(monthlyCostsInvest) > 0 ? (\n                  <span className=\"text-red\">Verlust</span>\n                ) : parseFloat(monthlyCostsInvest) < 0 ? (\n                  <span className=\"text-green\">Gewinn</span>\n                ) : (\n                  <span />\n                )}\n              </small>\n            </div>\n          </div>\n          <span className=\"p-buttonset\">\n            <Button\n              label=\"Miete vorschlagen\"\n              icon=\"pi pi-dollar\"\n              onClick={proposeRent}\n            />\n            <a href=\"https://www.sparkasse.de/service/rechner/nebenkostenrechner.html\">\n              <Button label=\"SPK NK Rechner\" />\n            </a>\n          </span>\n          <a\n            className=\"bmcButton\"\n            target=\"_blank\"\n            href=\"https://www.buymeacoffee.com/Robs\"\n          >\n            <img\n              className=\"bmcButtonImg\"\n              src=\"https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg\"\n              alt=\"Kauf mir einen Kaffee\"\n            />\n            <span style={{ marginLeft: 15, fontSize: 19 }}>\n              Kauf mir einen Kaffee\n            </span>\n          </a>\n        </Fieldset>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default injectIntl(App);\n","export const parseImmoScout = url => {\n\treturn `parsed ${url}!`;\n};\n","import \"primereact/resources/themes/saga-blue/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\nimport \"primeicons/primeicons.css\";\nimport \"primeflex/primeflex.css\";\nimport \"./index.css\";\n\nimport * as de from \"react-intl/locale-data/de\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\naddLocaleData([...de]);\n\nReactDOM.render(\n\t<Router>\n\t\t<IntlProvider locale=\"de\">\n\t\t\t<App />\n\t\t</IntlProvider>\n\t</Router>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}